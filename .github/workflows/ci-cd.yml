name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  CI: true
  ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}

defaults:
  run:
    shell: bash
    working-directory: ./

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests with coverage
      run: |
        npm test -- --coverage --watchAll=false
        
    - name: Upload coverage to Codecov
      if: github.event_name != 'pull_request'
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN || 'dummy-token' }}
        file: ./coverage/lcov.info
        fail_ci_if_error: false
        verbose: true

  build-and-deploy:
    name: Build and Deploy
    needs: test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "Building for production"
          npm run build:prod
        else
          echo "Building for ${{ env.ENVIRONMENT }}"
          npm run build
        fi
        
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
      
    - name: Deploy to Vercel
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      run: |
        if [ -z "$VERCEL_TOKEN" ]; then
          echo "Vercel token not found. Skipping deployment."
          exit 0
        fi
        
        if [ "${{ env.ENVIRONMENT }}" = "production" ]; then
          echo "Deploying to production"
          vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --confirm
        else
          echo "Deploying preview"
          vercel --token=${{ secrets.VERCEL_TOKEN }} --confirm
        fi